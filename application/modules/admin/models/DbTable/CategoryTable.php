<?php
/**
 * Meme CMS
 *
 * LICENSE
 *
 * This source file is subject to the GPL license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://memecms.com/license/gnu-gpl
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@memecms.com so we can send you a copy immediately.
 *
 * @version		MEME
 * @package		MemeCMS
 * @copyright	Copyright (C) 2009 - 2012 Alessio Pigliacelli, Studio Pigliacelli S.a.s. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt http://memecms.com/license/gnu-gpl
 * @version		$Id: CategoryTable.php 401 2010-11-18 20:25:30Z alex $
 */

class Admin_Model_DbTable_CategoryTable extends Zend_Db_Table_Abstract {

/* object_type
 * 1 - Posts
 * 2 - Pages
 * 3 - Products
*/


	protected $_name = 'meme_category';

	protected $cache;
	
	
	function init()
	{
		$this->cache = Zend_Registry::get('Meme_Cache');
		$this->urlAdapter = new Admin_Model_urlAdapter();
	}




    /**
     * Result all category of object
     *
	 * @param  int  $object_type  Type of category post, product and more
	 * @return Array          
     *
     *
     */
 
	public function getAll($object_type)
	{
		$id = 'Category_getAll_'.$object_type;
		
		if(!($data = $this->cache->load($id)))
			{
				$select = $this->select()->where('category_object_type = ?', $object_type);		
				$category = $this->fetchAll($select)->toArray();
			
				$this->cache->save($category, $id, array($this->_name));

				return $category;
			}
			else
			{		
				return $this->cache->load($id);
			}
	}
	
	
	
	
	
	
	
	
    /**
     * Add category
     *
	 * @param  int		$object_type	Type of category post, product and more
	 * @param  array	$category		Array content info for create a category
	 * @param  int		$user_id		User id who created the category
	 *
	 * @return int		Id category generated by mysql auto increment          
     *                          
     *
     */
 
	public function add($object_type, $category, $user_id)
	{
			
		$urlName = $this->urlAdapter->cleanURL($category['category_name']);
		$select = $this->select()->where('category_name_url = ?', $urlName);		
		$row = $this->fetchRow($select);

		if($row != false)
			{
				$numero = 2;
				
				while($row != false)
					{
						$row = $this->getFromNameUrl($urlName.$numero);

						$nome_url_category = $urlName.$numero;
						$numero++;
					}
			}
		else
		{
			$nome_url_category = $urlName;
		}

		$data = array( 
			'category_object_type'=> $object_type,
			'category_name'=> $category['category_name'],
			'category_name_url'=> $nome_url_category,
			'category_type'=> $category['category_type'],
			'category_user_id'=> $user_id,
					);

		$this->insert($data);
		
		
		//cache
		if(extension_loaded('apc') == 1)
					{	// clean all records
						$this->cache->clean(Zend_Cache::CLEANING_MODE_ALL);
 
					}
				else
					{
						$this->cache->clean(Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG, array($this->_name));
						$this->cache->clean(Zend_Cache::CLEANING_MODE_OLD);					
					}
		//end cache

		
		
		return $this->getAdapter()->lastInsertId();
		
		
	}




    /**
     * Find category from name url
     *
	 * @param  int	$nomeurl	Name url find
	 *
	 * @return object		Return info category row     
     *                          
     *
     */

	public function getFromNameUrl($nomeurl)
	{
	
		$id = 'Category_getFromNameUrl_'.$nomeurl;
		
		if(!($data = $this->cache->load($id)))
			{
				$row = $this->fetchRow($this->select()->where('category_name_url = ?' , $nomeurl));
		
				$this->cache->save($row, $id, array($this->_name));

		
				if (!$row) {
					return false;
				}
		
				return $row;
		}
		else
			{		
				return $this->cache->load($id);
			}

	}

	
	
	
	
	
	/**
     * Find category from id category
     *
	 * @param  int	$category_id	Category_id for find
	 *
	 * @return object		Return info category row     
     *                          
     *
     */

	public function getFromId($category_id)
	{
		$category_id = (int)$category_id;

		$id = 'Category_getFromId_'.$category_id;

		if(!($data = $this->cache->load($id)))
			{
				$row = $this->fetchRow('category_id = ' . $category_id);
				
				$this->cache->save($row, $id, array($this->_name));

				if (!$row) {
					throw new Exception("Count not find row $category_id");
				}
				return $row;
			}
		else
			{		
				return $this->cache->load($id);
			}
	}

	
	
	
	
	
	
	
	/**
     * Edit category 
     *
	 * @param	int		$object_type	Category_id for find
	 * @param	Array	$category		Array content info for edit category
	 * @param	int		$user_id		User id creator category

	 * @return null
     *                          
     *
     */

	
	public function edit($object_type, $category, $user_id)
	{

		$urlName = $this->urlAdapter->cleanURL($category['category_name']);

		$select = $this->select()->where('category_name_url = ?', $urlName);		
		$row = $this->fetchRow($select);
		if($row != false)
					{
						$numero = 2;
												
						while($row != false)
						{
							$row = $this->getFromNameUrl($urlName.$numero);

							$nome_url_category = $urlName.$numero;
							$numero++;
						}
					}
		else
		{$nome_url_category = $urlName;}

		$data = array(
				'category_object_type'=> $object_type,
				'category_name'=> $category['category_name'],
				'category_name_url'=> $nome_url_category,
				'category_type'=> $category['category_type'],			
				);
		$where = 'category_id = '.$category['category_id'];
		
		
		//cache
		if(extension_loaded('apc') == 1)
					{	// clean all records
						$this->cache->clean(Zend_Cache::CLEANING_MODE_ALL);
 
					}
				else
					{
						$this->cache->clean(Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG, array($this->_name));
						$this->cache->clean(Zend_Cache::CLEANING_MODE_OLD);					
					}
		//end cache
		
		$this->update($data , $where); 
	}
	
	
	
	

	
	
	/**
     * Delete category 
     *
	 * @param  int	$category_id	Category_id for find
	 *
	 * @return null
     *                          
     *
     */

	public function deleteFromId($category_id)
	{
		$where = $this->getAdapter()->quoteInto('category_id = ?', $category_id);
		$this->delete($where);
		
		$data = array('category_type'=> '0',);
		$where = 'category_type = '.$category_id;
		
		//cache
		if(extension_loaded('apc') == 1)
					{	// clean all records
						$this->cache->clean(Zend_Cache::CLEANING_MODE_ALL);
					}
				else
					{
						$this->cache->clean(Zend_Cache::CLEANING_MODE_MATCHING_ANY_TAG, array($this->_name));
						$this->cache->clean(Zend_Cache::CLEANING_MODE_OLD);					
					}
		//end cache

		$this->update($data , $where);	
	}


}